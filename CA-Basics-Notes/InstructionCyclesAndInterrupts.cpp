//////////////////////////////////////////////////////////
// [명령어 사이클과 인터럽트]
//////////////////////////////////////////////////////////

// [ 명령어 사이클 ] ///////////////////////////////////////

// 프로그램 속 각각의 명령어들은 일정한 주기가 반복되며 실행되는데, 이 주기를 명령어 사이클이라 한다.즉, 프로그램 속 각각의 명령어들은 명령어 사이클이 반복되며 실행된다.

// 명령어 사이클은 두 가지 나눠진다.

// 1. 인출 사이클
// : 메모리에 있는 명령어를 CPU로 가지고 오는 단계

// 2. 실행 사이클
// : CPU로 가져온 명령어를 실행하는 단계

// 그런데 CPU로 명령어를 가지고 와도 추가적으로 메모리에 접근해야 하는 경우 바로 실행이 불가능하다.이렇게 메모리에 추가적으로 접근하는 단계를 간접 사이클이라 한다.

//////////////////////////////////////////////////////////

// [ 인터럽트 ] ///////////////////////////////////////////

// 명령어 사이클이 고려해야 할 것이 하나 더 있는데 그것이 바로 인터럽트이다.

// CPU가 수행 중인 작업은 방해를 받아 잠시 중단될 수 있는데, 이렇게 CPU의 작업을 방해하는 신호를 인터럽트라 한다.

// 인터럽트는 ‘CPU가 꼭 주목해야 할 때’ 혹은 ‘CPU가 이른 처리해야 할 다른 작업이 생겼을 때’ 발생한다.

// 인터럽트는 크게 동기 인터럽트와 비동기 인터럽트로 나눠진다.

//////////////////////////////////////////////////////////

// ## 동기 인터럽트(예외) ///////////////////////////////////

// 동기 인터럽트란 CPU에 의해 발생하는 인터럽트이다.

// CPU가 명령어 수행 중 예상치 못한 상황(실행하는 프로그래밍상의 오류 같은 상황)에 마주쳤을 때 발생하는데, 이러한 점에서 예외라고 부른다.

// 예외는 다음과 같이 네 가지로 나눠볼 수 있다.

// 1. 폴트
// : 예외를 처리한 직후 발생한 명령어부터 실행을 재개하는 예외이다.

// 2. 트랩
// : 예외를 처리한 직후 예외가 발생한 명령어의 다음 명령어부터 실행을 재개하는 예외이다.
// ex) 디버깅

// 3. 중단
// : CPU가 실행 중인 프로그램을 강제로 중단시킬 수밖에 없는 심각한 오류를 발견했을 때 발생하는 예외이다.

// 4. 소프트웨어 인터럽트
// : 시스템 호출이 발생했을 때 발생한다.

//////////////////////////////////////////////////////////

// ## 비동기 인터럽트(하드웨어 인터럽트) //////////////////////

// 비동기 인터럽트란 주로 입출력장치에 의해 발생하는 인터럽트이다.

// ex) 세탁기 완료 알림, 전자레인지 완료 알림, 마우스 클릭



// 하드웨어 인터럽트는 알림과 같은 인터럽트이다.CPU는 입출력 작업 도중에도 효율적으로 명령어를 처리하기 위해 이러한 하드웨어 인터럽트를 사용한다.*
// * 입출력장치는 비교적 CPU보다 느리기 때문에 비동기 인터럽트가 없을 경우에 CPU가 입출력장치에 작업 완료 확인을 계속해서 확인을 해야 한다.

// 하드웨어 인터럽트 처리 순서

// 1. 입출력장치가 CPU에 인터럽트 요청 신호를 보냄.
// 2. CPU는 실행 사이클이 끝나고 명령어 인출하기 전 항상 인터럽트 여부를 확인.
// 3. 확인 후 CPU는 인터럽트 플래그를 통해 현재 인터럽트를 받아들일 수 있는지 여부를 확인함.
// 4. 받아들일 수 있다면 CPU는 지금까지의 작업을 백업.
// 5. CPU는 인터럽트 벡터를 참조하여 인터럽트 서비스 루틴을 실행.
// 6. 인터럽트 서비스 루틴 실행이 끝나면 백업해둔 작업 가져와 실행.

// - 인터럽트 요청 신호
//   : 인터럽트 전 CPU에게 지금 끼어들어도 되는지 물어보는 신호이다.

// -인터럽트 플래그
// : 하드웨어 인터럽트를 받아들일지 여부를 결정하는 플래그이다.
//		- CPU가 인터럽트 요청을 수용하기 위해선 인터럽트 플래그가 활성화되어 있어야 한다.
//		- 모든 하드웨어 인터럽트를 인터럽트 플래그가 막을 수 있는 것은 아니다.
//		- 하드웨어 고장처럼 반드시 가장 먼저 처리해야 하는 인터럽트는 플래그가 불가능으로 설정되어 있다 해도 무시할 수 없다.

// - 인터럽트 서비스 루틴
// : 인터럽트를 처리하기 위한 프로그램이며 인터럽트 핸들러라 부르기도 한다.
//		- 인터럽트를 처리하는 방법은 입출력장치마다 다르다.
//		→ 메모리에는 여러 개의 인터럽트 서비스 루틴이 저장되어 있다.
//		- 여느 프로그램과 마찬가지로 명령어와 데이터로 이루어져 있으며 레지스터를 사용하며 실행된다.
//		- CPU가 하드웨어 인터럽트를 처리한다 == CPU가 인터럽트 서비스 루틴 실행 후 본래 실행 중이던 작업으로 되돌아온다.

// - 인터럽트 벡터
// : CPU가 수많은 인터럽트 서비스 루틴을 구분하기 위해 사용하는, 인터럽트 서비스 루틴을 식별하기 위한 정보이다.
//		- CPU는 하드웨어 인터럽트 요청을 보낸 대상으로부터 데이터 버스를 통해 인터럽트 벡터를 전달받는다.
//		- 이를 통해 CPU는 인터럽트 서비스 루틴의 시작 주소를 알 수 있다.

// - CPU는 인터럽트 서비스 루틴을 실행하기 전에 프로그램 카운터 값 등 현재 프로그램을 재개하기 위해 필요한 모든 내용을 스택에 백업해둔다.