//////////////////////////////////////////////////////////
// [소스 코드와 명령어]
//////////////////////////////////////////////////////////

// 모든 소스 코드는 컴퓨터 내부에서 명령어로 변환된다.

// [ 고급 언어와 저급 언어 ] ////////////////////////////////

// 프로그래머가 프로그램을 만들 때 사용하는 프로그래밍 언어는 컴퓨터가 이해하는 언어가 아닌 사람이 이해하고 작성하기 쉽게 만들어진 언어다.이러한 언어를 고급 언어라 한다.

// 반대로 컴퓨터가 직접 이해하고 실행할 수 있는 언어를 저급 언어라 한다.저급 언어는 명령어로 이루어져 있다.

// 컴퓨터가 이해하고 실행할 수 있는 언어는 오직 저급 언어.따라서 고급 언어로 작성된 소스 코드가 실행되기 위해서는 저급 언어, 즉 명령어로 변환이 되어야 한다.

// 저급 언어에는 기계어와 어셈블리어, 두 가지가 있다.

// - 기계어
//		- 기계어란 0과 1의 명령어 비트로 이루어진 언어다.즉, 0과 1로 이루어진 명령어의 모음이다.
//		- 이진수로 나열하면 너무 길어지기 때문에 가독성을 위해 십육진수로 표현하기도 한다.
// - 어셈블리어
//		- 0과 1로 표현된 명령어(기계어)를 읽기 편한 형태로 번역한 언어가 어셈블리어다.

//////////////////////////////////////////////////////////

// [ 컴파일 언어와 인터프리터 언어 ] /////////////////////////

// 고급 언어로 작성된 소스 코드를 저급 언어로 변환하는 방식에는 크게 두 가지 방식, 컴파일 방식과 인터프리트 방식이 있다.

// 컴파일 방식으로 작동하는 프로그래밍 언어를 컴파일 언어, 인터프리트 방식으로 작동하는 프로그래밍 언어를 인터프리트 언어라 한다.

// ## 컴파일 언어 //////////////////////////////////////////

// 컴파일 언어란 컴파일러에 의해 소스 코드 전체가 저급 언어로 변환되어 실행되는 고급 언어이다.대표적인 언어로 C언어가 있다.

// 컴파일 언어로 작성된 소스 코드는 코드 전체가 저급 언어로 변환되는 과정을 거치는데 이 과정을 컴파일이라 한다.그리고 이러한 컴파일을 수행해 주는 도구를 컴파일러라 부른다.

// 컴파일러는 개발자가 작성한 소스 코드를 훑어보며 문법적인 오류가 없는지, 실행 가능한 코드인지 등을 따지며 소스 코드의 처음부터 끝까지 저급 언어로 컴파일한다.

// 이때 소스 코드 내에서 오류가 하나라도 발견될 시 해당 소스 코드는 컴파일에 실패한다.

// 컴파일러를 통해 저급 언어로 변환된 코드를 목적 코드라 부른다.

// ## 인터프리트 언어 //////////////////////////////////////

// 인터프리트 언어는 인터프리터에 의해 소스 코드가 한 줄씩 실행되는 고급 언어이다.대표적인 언어로 Python이 있다.

// 인터프리트 언어는 컴파일 언어와 달리 소스 코드를 한 줄씩 차례로 실행한다.그리고 소스 코드를 한 줄씩 저급 언어로 변환하여 실행해 주는 도구를 인터프리터라 한다.

// 컴퓨터와 대화하듯이 소스 코드를 한 줄씩 실행하기 때문에 소스 코드 전체를 저급 언어로 변환하는 시간을 기다릴 필요가 없다는 특징이 있다.

// 그리고 컴파일 언어와 달리 한 줄씩 소스 코드를 실행하기 때문에 N번째 줄에 문법 오류가 있더라도 N - 1번째 줄까지는 올바르게 수행된다.

// 일반적으로 컴파일 언어가 인터프리트 언어보다 빠르다.컴파일 결과물, 목적 코드는 컴퓨터가 이해하고 실행할 수 있는 저급 언어인 반면, 인터프리터 언어는 소스 코드 마지막에 이를 때까지 한 줄씩 저급 언어로 해석하며 실행해야 하기 때문이다.

// 컴파일 언어와 인터프리트 언어 구분 -------------------------

// 하나의 프로그래밍 언어가 반드시 둘 중 하나의 방식만으로 작동한다 생각하는 것은 오개념.

// C, C++처럼 명확하게 구분할 수 있는 언어도 있으나, 많은 언어들이 컴파일 언어와 인터프리트 언어의 경계가 모호한 경우가 많다.

// 인터프리트 언어로 잘 알려진 Python 또한 컴파일을 안 하는 것이 아니며 Java 같은 경우 컴파일과 인터프리트를 동시에 수행한다.
// -------------------------------------------------------

// 목적 파일 VS 실행 파일 -----------------------------------
// 목적 코드로만 이루어진 파일을 목적 파일이라 한다.이 목적 파일이 실행 파일이 되기 위해서는 링킹이란 작업을 거쳐야 한다.

// 링킹이란 목적 파일이 실행될 때 해당 목적 파일에 없는 외부 기능들을 연결 짓는 작업을 의미한다.

// 링킹 작업을 통해 비로서 실행 파일이 생성된다.
// -------------------------------------------------------