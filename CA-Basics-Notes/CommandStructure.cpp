//////////////////////////////////////////////////////////
// [명령어의 구조]
//////////////////////////////////////////////////////////

// [ 연산 코드와 오퍼랜드 ] /////////////////////////////////

// 명령어는 ‘무엇을 대상으로, 어떤 작동을 수행하라’는 구조로 연산 코드와 오퍼랜드로 구성되어 있다.

// - 연산 코드(연산자)
//		- ‘명령어가 수행할 연산’ 을 연산 코드라 한다.
// - 오퍼랜드(피연산자)
//		- ‘연산에 사용할 데이터’ 또는 ‘연산에 사용할 데이터가 저장된 위치’ 를 오퍼랜드라 한다.

// 연산 코드가 담기는 영역을 연산 코드 필드, 오퍼랜드가 담기는 영역을 오퍼랜드 필드라 부른다.

// 기계어와 어셈블리어 또한 명령어이기에 연산 코드와 오퍼랜드로 구성되어 있다.

//////////////////////////////////////////////////////////

// ## 오퍼랜드 ////////////////////////////////////////////

// 오퍼랜드 필드에는 숫자, 문자 등을 나타내는 데이터 또는 메모리나 레지스터 주소가 올 수 있다.주로 메모리 주소나 레지스터 이름이 담기기 때문에 오퍼랜드 필드는 주소 필드라 불리기도 한다.

// 오퍼랜드는 명령어 안에 하나도 없을 수 있으며, 한 개부터 세 개 등 여러 개가 있을 수도 있다.

//////////////////////////////////////////////////////////

// ## 연산 코드 ///////////////////////////////////////////

// 연산 코드는 명령어가 수행할 연산을 의미한다.

// 종류가 매우 많지만, 가장 기본적인 연산 코드 유형은 크게 네 가지 나눌 수 있다.

// 1. 데이터 전송
// 2. 산술 / 논리 연산
// 3. 제어 흐름 변경
// 4. 입출력 제어

// 명령어의 종류와 생김새는 CPU마다 다르다.따라서 연산 코드의 종류와 생김새 또한 CPU에 따라 다르다.

//////////////////////////////////////////////////////////

// [ 주소 지정 방식 ] //////////////////////////////////////

// 정보의 용량을 늘리기 위해 오퍼랜드 필드에 명령어를 직접 할당하는 것이 아닌 주소를 할당한다.

// 오퍼랜드 필드에 데이터가 저장된 위치를 명시할 때 연산에 사용할 데이터 위치를 찾는 방법을 주소 지정 방식이라고 한다.

// 연산 코드에 사용할 데이터가 저장된 위치, 즉 연산의 대상이 되는 데이터가 저장된 위치를 유효 주소라 한다.

// 다시 말해, 주소 지정 방식은 유효 주소를 찾는 방법이다.

//////////////////////////////////////////////////////////

// ## 즉시 주소 지정 방식 ///////////////////////////////////

// 연산에 사용할 데이터를 오퍼랜드 필드에 직접 명시하는 방식이다.

// - 단점 : 데이터의 크기가 작아진다.
// - 장점 : 연산에 사용할 데이터를 메모리나 레지스터에서 찾는 과정이 없어 빠르다.

// ## 직접 주소 지정 방식 ///////////////////////////////////

// 오퍼랜드 필드에 유효 주소를 직접적으로 명시하는 방식이다.

// 표현할 수 있는 데이터의 크기는 즉시 주소 지정 방식 보다 크지만 주소를 표현할 수 있는 범위가 연산 코드의 비트 수만큼 줄어들었다.

// ## 간접 주소 지정 방식 ///////////////////////////////////

// 유효 주소의 주소를 오퍼랜드 필드에 명시하는 방식이다.

// - 장점 : 직접 주소를 지정하는 방식보다 표현할 수 있는 유효 주소의 범위가 넓어졌다.

// ## 레지스터 주소 지정 방식 ////////////////////////////////

// 직접 주소 지정 방식과 비슷하게 연산에 사용할 데이터를 저장한 레지스터를 오퍼랜드 필드에 직접 명시하는 방법이다.

// - 단점 : 표현할 수 있는 레지스터의 크기에 제한이 생길 수 있다.
// - 장점 : CPU 외부에 있는 메모리 접근보다 CPU 내부에 있는 레지스터에 접근하는 것이 더 빠르다.
//			→ 직접 주소 지정 방식보다 빠르게 데이터 접근 가능.

// ## 레지스터 간접 주소 지정 방식 ////////////////////////////

// 연산에 사용할 데이터를 메모리에 저장하고, 그 주소(유효 주소)를 저장한 레지스터를 오퍼랜드 필드에 명시하는 방법이다.

// - 장점 : 간접 주소 지정 방식과 비슷하지만, 메모리에 접근하는 횟수를 한 번으로 줄어든다.

// 정리 ----------------------------------------------------

// - 연산에 사용할 데이터를 찾는 방법, 주소 지정 방식
// - 연산에 사용할 데이터가 저장된 위치, 유효 주소
// - 주소 지정 방식 대표 다섯 가지
//		 - 즉시 주소 지정 방식 : 연산에 사용할 데이터
//		- 직접 주소 지정 방식 : 유효 주소(메모리 주소)
//		- 간접 주소 지정 방식 : 유효 주소의 주소
//		- 레지스터 직접 지정 방식 : 유효 주소(레지스터 이름)
//		- 레지스터 간접 지정 방식 : 유효 주소를 저장한 레지스터
// ---------------------------------------------------------