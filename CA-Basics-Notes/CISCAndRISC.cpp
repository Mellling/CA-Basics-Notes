//////////////////////////////////////////////////////////
// [CISC와 RISC]
//////////////////////////////////////////////////////////

// [ 명령어 집합 ] /////////////////////////////////////////

// 명령어 집합(ISA)이란 CPU가 이해할 수 있는 명령어들의 모음으로 명령어 집합 구조라고 부르기도 한다.

// CPU마다 ISA가 다를 수 있으며, ISA가 다를 경우 서로의 명령어를 이해할 수 없다.

// ISA가 다르다는 건 CPU가 이해할 수 있는 명령어가 다르다는 뜻이며, 명령어가 다르면 어셈블리어도 달라진다.

// → 같은 소스 코드로 만들어진 프로그램이라 하더라도 ISA가 다르면 CPU가 이해할 수 있는 명령어 어셈블리어도 달라진다는 것이다.

// ISA가 다르면 제어장치가 명령어를 실행하는 방식, 사용되는 레지스터의 종류와 개수, 메모리 관리 방법 등 다양한 것이 달라진다.

//////////////////////////////////////////////////////////

// [ CISC ] //////////////////////////////////////////////

// CISC란 복잡하고 다양한 명령어들을 활용하는 CPU 설계 방식이다.

// ex) x86, x86 - 64 ← 대표적인 CISC 기반 ISA

// 다양하고 강력한 기능의 명령어 집합을 활용하기 때문에 명령어의 형태와 크기가 다양한 가변 길이 명령어를 활용한다.

// 여기서 다양하고 강력한 명령어를 활용한다는 말은 상대적으로 적은 수의 명령어로도 프로그램을 실행할 수 있다는 것을 의미한다.

// - 장점: 메모리를 최대한 아끼며 개발하기 좋다.
// - 단점 : 활용하는 명령어가 워낙 복잡하고 다양한 기능을 제공하는 탓에 명령어의 크기와 실행되기까지의 시간이 일정하지 않다. (명령어 실행하는 데에 여러 클럭 주기 필요)

// 이러한 단점은 명령어 파이프라인을 구현하는데 큰 걸림돌이 된다.규격화되지 않은 명령어가 파이프라이닝을 어렵게 만든다.

// 또한 대다수의 복잡한 명령어는 그 사용 빈도가 낮다.

// 정리 ---------------------------------------------------
// - CISC 명령어 집합은 복잡하고 다양한 기능을 제공하기에 작은 수의 명령으로 프로그램을 작동시키고 메모리 절약이 가능하다.
// - 명령어 규격화가 어려워 파이프라이닝이 어려우며 대다수의 복잡한 명령어는 그 사용 빈도가 낮다.
// --------------------------------------------------------

//////////////////////////////////////////////////////////

// [ RISC ] //////////////////////////////////////////////

// RISC는 CISC에 비해 명령어의 종류가 적다.그리고 CISC와 달리 짧고 규격화된 명령어, 되도록 1클럭 내외의 실행되는 명령어를 지향한다.
// 즉, RISC는 고정 길이 명령어를 활용한다.

// ex) ARM

// RISC 명령어 집합은 명령어 파이프라이닝에 최적화되어 있다.

// RISC는 메모리에 접근하는 명령어를 load, store 두 개로 제한한 만큼 메모리 접근을 단순화하고 최소화를 추구한다.그렇기 때문에 CISC보다 주소 지정 방식의 종류가 적은 경우가 많다.

// 대신 레지스터를 적극 활용한다.그렇기 때문에 CISC보다 레지스터를 활용한 연산이 많고, 일반적인 경우보다 범용 레지스터 개수가 더 많다.

// RISC는 CISC보다 많은 명령어로 프로그램을 작동시킨다.