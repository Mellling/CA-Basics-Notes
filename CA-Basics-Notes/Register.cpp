//////////////////////////////////////////////////////////
// [레지스터]
//////////////////////////////////////////////////////////

// 프로그램 속 명령어와 데이터는 반드시 실행 전후로 레지스터에 저장된다.

// [ 반드시 알아야 할 레지스터 ] /////////////////////////////

// 1. 프로그램 카운터
// 2. 명령어 레지스터
// 3. 메모리 주소 레지스터
// 4. 메모리 버퍼 레지스터
// 5. 플래그 레지스터
// 6. 범용 레지스터
// 7. 스택 포인터
// 8. 베이스 레지스터

// ## 프로그램 카운터 ///////////////////////////////////////

// - 프로그램 카운터는 메모리에서 가져올 명령어의 주소, 즉 메모리에서 읽어 들일 명령어의 주소를 저장한다.
// - 명령어 포인터라고 부르기도 한다.

// ## 명령어 레지스터

// - 명령어 레지스터란 해석할 명령어, 즉 방금 메모리에서 읽어 들인 명령어를 저장하는 레지스터이다.
// - 제어장치는 명령어 레지스터 속 명령어를 받아들이고 이를 해석한 뒤 제어 신호를 보낸다.

// ## 메모리 주소 레지스터 ///////////////////////////////////

// - 메모리 주소 레지스터는 메모리의 주소를 저장하는 레지스터이다.
// - CPU가 읽어 들이고자 하는 주소 값을 주소 버스로 보낼 때 메모리 주소 레지스터를 거치게 된다.

// ## 메모리 버퍼 레지스터 ///////////////////////////////////

// - 메모리와 주고받을 값(데이터와 명령어)을 저장하는 레지스터를 메모리 버퍼 레지스터라 한다.
// - 즉, 메모리에 쓰고 싶은 값이나 메모리로부터 전달 받은 값은 메모리 버퍼 레지스터를 거친다.
//		→ CPU가 데이터 버스로 주고받을 값은 메모리 버퍼 레지스터를 거친다.

//////////////////////////////////////////////////////////

// ## 메모리에 저장된 프로그램을 실행하는 과정에서 프로그램 카운터, 명령어 레지스터, 메모리 주소 레지스터, 메모리 버퍼 레지스터에 어떤 값이 담기는가

// - 프로그램 실행 과정 -------------------------------------

// 1. 프로그램을 처음부터 실행하기 위해 프로그램 카운터에는 1000이 저장됨.← 메모리에 가져올 명령어가 1000번지에 있다는 걸 의미.

// 2. 1000번지를 읽어 들이기 위해 주소 버스로 1000번지 보내야 함.이를 위해 메모리 주소 레지스터에 1000이 저장.

// 3. ‘메모리 읽기’ 제어 신호와 메모리 주소 레지스터 값이 각각 제어 버스와 주소 버스를 통해 메모리로 보내짐.

// 4. 메모리 1000번지에 저장된 값이 데이터 버스를 통해 메모리 버퍼 레지스터로 전달되며, 프로그램 카운터는 증가되어 다음 명령어를 읽어 들일 준비를 함.

// 5. 메모리 버퍼 레지스터에 저장된 값은 명령어 레지스터로 이동함.

// 6. 제어장치는 명령어 레지스터의 명령어를 해석하고 제어 신호를 발생시킴.

// --------------------------------------------------------

// 이처럼 프로그램 카운터는 지속적으로 증가하여 계속해서 다음 명령어를 읽어 들일 준비를 한다.

//////////////////////////////////////////////////////////

// ## 범용 레지스터 ////////////////////////////////////////

// - 이름 그대로 다양하고 일반적인 상황에서 자유롭게 사용할 수 있는 레지스터이다.
// - 범용 레지스터는 데이터와 주소를 모두 저장할 수 있다.

// ## 플래그 레지스터 //////////////////////////////////////

// - 연산 결과 또는 CPU의 상태에 대한 부가적인 정보를 저장하는 레지스터이다.

//////////////////////////////////////////////////////////

// [ 특정 레지스터를 이용한 주소 지정 방식(1) : 스택 주소 지정 방식 ]

// 스택 주소 지정 방식이란 스택과 스택 포인터를 이용한 주소 지정 방식이다.

// ## 스택 포인터 //////////////////////////////////////////

// - 스택의 꼭대기를 가리키는 레지스터이다.
//	→ 스택의 마지막으로 저장된 값의 위치를 저장하는 레지스터이다.
// - 스택 주소 지정 방식이라는 주소 지정 방식에 사용된다.

// 스택 포인터는 스택의 꼭대기를 가리키고 있는데, 스택의 어디까지 데이터가 채워져 있는지에 대한 표시라 생각하면 쉽다.

// 스택은 메모리 안에, 정확히는 메모리 안에 스택처럼 사용할 영역이 정해져 있다.이를 스택 영역이라 부른다.

// [ 특정 레지스터를 이용한 주소 지정 방식(2) : 변위 주소 지정 방식 ]

// - 오퍼랜드 필드의 값(변위)과 특정 레지스터의 값을 더하여 유효 주소를 얻어내는 주소 지정 방식이다.
// - 프로그램 카운터와 베이스 레지스터가 사용이 된다.

// 변위 주소 지정 방식을 사용하는 명령어는 연산 코드 필드, 어떤 레지스터의 값을 더할지 나타내는 레지스터 필드, 그리고 주소를 담고 있는 오퍼랜드 필드로 구성되어 있다.

// 오퍼랜드 필드의 주소와 어떤 레지스터를 더하는지에 따라 상대 주소 지정 방식, 베이스 레지스터 주소 지정 방식으로 나눠진다.

// ## 상대 주소 지정 방식 ///////////////////////////////////

// 오퍼랜드와 프로그램 카운터의 값을 더하여 유효 주소를 얻는 방식이다.

//상대 주소 지정 방식은 프로그래밍 언어의 if문과 유사하게 모든 코드를 실행하는 것이 아닌, 분기하여 특정 주소의 코드를 실행할 때 유용하다.

// ## 베이스 레지스터 주소 지정 방식 //////////////////////////

// 오퍼랜드와 베이스 레지스터의 값을 더하여 유효 주소를 얻는 방식이다.

// 여기서 베이스 레지스터는 ‘기준 주소’, 오퍼랜드는 ‘기준 주소로부터 떨어진 거리’ 의 역할.

// 즉, 베이스 레지스터 주소 지정 방식은 베이스 레지스터 속 주소로부터 얼만큼 떨어져 있는 주소에 접근할 것인지 연산하여 유효 주소를 얻어내는 방식이다.