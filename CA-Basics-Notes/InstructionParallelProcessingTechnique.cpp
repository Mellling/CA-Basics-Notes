//////////////////////////////////////////////////////////
// [명령어 병렬 처리 기법]
//////////////////////////////////////////////////////////

// 명령어를 동시에 처리하여 CPU를 한시도 쉬지 않고 작동시키는 방법을 명령어 병렬 처리 기법이라고 한다.

// 명령어 파이프라인, 슈퍼스칼라, 비순차적 명령어 처리가 있다.

// [ 명령어와 파이프라인 ] //////////////////////////////////

// 명령어 처리 과정을 클럭 단위로 나누면 다음과 같다.

// - 명령어 인출
// - 명령어 해석
// - 명령어 실행
// - 결과 저장

// 여기서 같은 단계가 겹치지만 않는다면 CPU는 각 단계를 동시에 실행할 수 있다.

// 명령어 파이프라인은 여러 명령어를 서로 연결하여 데이터를 단계적으로 처리하는 방식으로 각각의 명령어는 독립적인 작업을 수행하며, 결과를 다음 명령어로 전달하는 흐름을 형성한다.

// 명령어 파이프라이닝은 파이프라인 방식으로 여러 명령어를 체계적으로 조합하여 하나의 연속적인 작업을 완성하는 프로세스를 말합니다.

// 즉, 공장 라인 같이 명령어들을 명령어 파이프라인에 넣고 동시에 처리하는 기법을 명령어 파이프라이닝이라 한다.

// 파이프라인은 단순히 명령어의 연결을 의미하지만, 파이프라이닝은 이를 전략적으로 계획하고 사용하는 과정이나 기술을 포괄한다.

//////////////////////////////////////////////////////////

// 파이프라이닝은 높은 성능을 가져오지만, 특정 상황에서는 성능 향상에 실패하기도 한다.이러한 상황을 파이프라인 위험이라고 부른다.

// ## 데이터 위험 //////////////////////////////////////////

// - 명령어 간 ‘데이터 의존성’에 의해 발생한다.
// - 데이터 의존적인 두 명령어를 무작정 동시에 실행하려고 하면 파이프라인은 제대로 작동하지 않는 것을 데이터 위험이라 부른다.

// ## 제어 위험 ////////////////////////////////////////////

// - 주로 분기 등으로 인한 ‘프로그램 카운터의 갑작스러운 변화’에 의해 발생한다.
// - 프로그램 카운터 값에 갑작스러운 변화가 생긴다면 명령어 파이프라인에 미리 가져와 처리 중이었던 명령어들은 아무 쓸모 없어진다.
// → 이를 위해 분기 예측이라는 기술 사용한다.
// - 분기 예측이란 프로그램이 어디로 분기할지 미리 예측하는 기술이다.

// ## 구조적 위험 ///////////////////////////////////////////

// - 명령어들을 겹쳐서 실행하는 과정에서 서로 다른 명령어가 동시에 ALU, 레지스터 등과 같은 CPU 부품을 사용하려 할 때 발생한다.
// - 자원 위험이라고 부르기도 한다.

//////////////////////////////////////////////////////////

// [ 슈퍼스칼라 ] //////////////////////////////////////////

// CPU 내부에 여러 개의 명령어 파이프라인을 포함하는 구조를 슈퍼스칼라라 한다.

// 공장 생산 라인을 여러 개 두는 것과 같다고 보면 된다.

// 슈퍼스칼라 구조로 명령어 처리가 가능한 CPU를 슈퍼스칼라 프로세서 또는 슈퍼스칼라 CPU라 부른다.← 매 클럭 주기마다 동시에 여러 명령어 인출 / 실행 가능하다.

// 이론적으로는 파이프라인 개수에 비례하여 프로그램 처리 속도가 빨라진다.허나 파이프라인 위험 등의 예기치 못한 문제가 있어 반드시 그 수에 비례하여 빨라지진 않는다.

//////////////////////////////////////////////////////////

// [ 비순차적 명령어 처리 ] /////////////////////////////////

// 비순차적 명령어 처리(OoOE)는 명령어를 순차적으로 실행하지 않는 기법으로 명령어의 합법적인 새치기라 볼 수 있다.

// 비순차적 명령어 처리 기법은 명령어를 순차적으로 실행하지 않고 순서를 바꿔 실행해도 무방한 명령어를 먼저 실행하여 명령어 파이프라인이 멈추는 것을 방지하는 기법을 의미한다.

/*
1  M(100) ← 1
2  M(101) ← 2
3  M(102) ← M(100) + M(101)
4  M(150) ← 1
5  M(151) ← 2
6  M(152) ← 3
*/

// 3번 명령어를 실행하기 위해서는 1번과 2번 명령어 실행이 끝날 때까지 기다려야 한다.

// → 해당 명령어를 순차적으로 실행하는 CPU로 실행할 경우 2번 명령어가 끝날 때까지 3, 4, 5, 6번 명령어들이 대기하게 된다.

// 그러나 3번 명령어의 순서를 6번 뒤로 보내어 실행해도 문제가 발생하지 않는다.그럴 경우 순차적으로 실행하던 것보다 좀 더 효율적으로 명령어를 처리할 수 있게 된다.

// 비순차적 명령어는 처리가 가능한 CPU는 명령어들이 어떤 명령어와 데이터 의존성을 가지고 있는지, 순서를 바꿔서 실행할 수 있는 명령어에는 어떤 것들이 있는지 판단할 수 있어야 한다.

// 정리 ---------------------------------------------------
// - 명령어 파이프라이닝은 동시에 여러 개의 명령어를 겹쳐 실행하는 기법이다.
// - 슈퍼스칼라는 여러 개의 명령어 파이프라인을 두는 기법이다.
// - 비순차적 명령어 처리 기법은 파이프라인의 중단을 방지하기 위해 명령어를 순차적으로 처리하는 기법이다.
// --------------------------------------------------------