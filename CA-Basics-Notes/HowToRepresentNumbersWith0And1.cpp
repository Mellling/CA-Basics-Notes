//////////////////////////////////////////////////////////
// [0과 1로 숫자를 표현하는 방법]
//////////////////////////////////////////////////////////

// [ 정보 단위 ] //////////////////////////////////////////

// 컴퓨터는 0과 1밖에 이해하지 못한다.이 0과 1를 나타내는 가장 작은 정보 단위를 비트 bit라 한다. 1bit는 0과 1, 두 가지 정보를 표현할 수 있다.
// 따라서 n개의 bit는 2^n가지의 정보를 표현할 수 있다.

// 프로그램의 크기를 말할 때는 표현의 편의를 위해 bit보다 큰 단위를 사용한다.

// -------------------------------------------------------

// - 바이트 byte : 8개의 배트를 묶은 단위(2^8개(256개)의 정보 표현 가능)
// - 킬로바이트 kB : 1byte를 1000개 묶은 단위
// - 메가바이트 MB : 1kB를 1000개 묶은 단위
// - 기가바이트 GB : 1MB를 1000개 묶은 단위
// - 테라바이트 TB : 1GM를 1000개 묶은 단위
// --------------------------------------------------------

// 워드 ----------------------------------------------------

// 워드(word)란 CPU가 한 번에 처리할 수 있는 데이터의 크기를 의미한다.

// 워드의 절반 크기를 하프 워드, 1배 크기를 풀 워드, 2배 크기를 더블 워드라고 부른다.

// 워드의 크기는 CPU마다 다르지만 현대 컴퓨터의 워드 크기는 대부분 32bit 또는 64bit이다.
// ---------------------------------------------------------

//////////////////////////////////////////////////////////

// [ 이진법 ] /////////////////////////////////////////////

// ## 이진법과 이진수 ///////////////////////////////////////

// 수학에서 0과 1만으로 모든 숫자를 표현하는 방법을 이진법이라 하며 숫자가 1을 넘어가는 시점에 자리를 올림 한다.이러한 이진법으로 표현한 수를 이진수라 한다.

// 혼동을 예방하기 위해 이진수 끝에는 아래첨자 _(2)를 붙이거나 이진수 앞에 0b를 붙인다.

// ## 이진수의 음수 표현 ////////////////////////////////////

// 컴퓨터는 0과 1만 이해할 수 있기 때문에 이를 가지고만 음수를 표현해야 한다.

// 0과 1만으로 음수를 표현하는 방법 중 가장 널리 사용되고 있는 방법은 2의 보수를 구해 이를 음수로 간주하는 방법이다.

// 2의 보수의 사전적 의미는 ‘어떤 수를 그보다 큰 2^n에서 뺀 값’으로 이를 쉽게 ‘모든 0과 1을 뒤집고, 거기에 1을 더한 값’ 으로 이해하면 된다.

// 실제 이진수만 봐서는 이게 음수인지 양수인지 구분하기가 어렵다.
// 그래서 컴퓨터 내부에서는 어떤 수를 다룰 때 이 수가 양수인지 음수인지 판별하기 위해 플래그를 사용한다. (CPU 안에 있는 플래그 레지스터에 구분)

// 플래그는 쉽게 말하면 부가 정보이다.

//////////////////////////////////////////////////////////

// [ 십육진법 ] ////////////////////////////////////////////

// ## 십육진법과 십육진수

// 이진법은 0과 1만으로 표현하다 보니 숫자의 길이가 너무 길어진다는 단점이 있다.그래서 데이터를 표현할 때 이진법 이외에 십육진법도 자주 사용한다.

// 십육진법이란 숫자가 15를 넘어가는 시점에 자리 올림을 하는 숫자 표현 방식이다.

// 이진수와 마찬가지로 구분을 위해 숫자 뒤에 아래첨자 _(16)를 붙이거나 앞에 0x를 붙인다.

// 십진수가 아닌 십육진수를 사용하는 주된 이유 중 하나는 이진수를 십육진수로, 십육진수를 이진수로 변환하기 쉽기 때문이다.

// 십육진수를 이진수로 변환할 때는 십육진수 한 글자를 4bit의 이진수로 간주하면 간단하다.

// 반대로 이진수를 십육진수로 변환할 때는 이진수 숫자를 네 개씩 끊고, 끊어 준 네 개의 숫자를 하나의 십육진수로 변환하여 뒤에 그대로 붙이면 된다.